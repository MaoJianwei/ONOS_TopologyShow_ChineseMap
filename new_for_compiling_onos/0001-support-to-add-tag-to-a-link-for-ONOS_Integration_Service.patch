From cbf3d46873baa24acf5a4c75b81e13e4124b1612 Mon Sep 17 00:00:00 2001
From: Jianwei Mao <maojianwei2012@126.com>
Date: Sun, 10 Nov 2024 01:41:25 +0800
Subject: [PATCH 1/2] support to add tag to a link for
 ONOS_Integration_Service.

Signed-off-by: Jianwei Mao <maojianwei2012@126.com>
---
 .../net/device/PortStatistics.java            |  15 +++
 .../net/statistic/DefaultLoad.java            |  30 +++++
 .../org/onosproject/net/statistic/Load.java   |  12 ++
 .../net/statistic/PortStatisticsService.java  |   5 +-
 .../statistic/impl/PortStatisticsManager.java |  14 +++
 .../ui/impl/TopologyViewMessageHandler.java   |   6 +-
 .../onosproject/ui/impl/TrafficMonitor.java   |   6 +
 .../ui/impl/TrafficMonitorBase.java           |  69 ++++++++---
 .../ui/impl/topo/Traffic2Monitor.java         |   5 +
 .../ui/impl/topo/util/TrafficLink.java        | 107 ++++++++++++++++--
 .../ui/lion/core/view/Topo.properties         |   1 +
 .../main/webapp/app/view/topo/topoTraffic.js  |   4 +-
 12 files changed, 251 insertions(+), 23 deletions(-)

diff --git a/core/api/src/main/java/org/onosproject/net/device/PortStatistics.java b/core/api/src/main/java/org/onosproject/net/device/PortStatistics.java
index 3dd00fbb30..4b41400ac2 100644
--- a/core/api/src/main/java/org/onosproject/net/device/PortStatistics.java
+++ b/core/api/src/main/java/org/onosproject/net/device/PortStatistics.java
@@ -19,6 +19,10 @@ import org.onosproject.net.Annotated;
 import org.onosproject.net.Annotations;
 import org.onosproject.net.PortNumber;
 
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
 import static org.onosproject.net.DefaultAnnotations.EMPTY;
 
 /**
@@ -26,6 +30,17 @@ import static org.onosproject.net.DefaultAnnotations.EMPTY;
  */
 public interface PortStatistics extends Annotated {
 
+    String ANNOTATION_MAO_TAG = "maoTagAnno";
+
+    String ANNOTATION_MAO_TAG_LEVEL = "maoTagLevelAnno";
+
+    String MAO_TAG_LEVEL_INFO = "INFO";       // PORT_TRAFFIC_GREEN
+    String MAO_TAG_LEVEL_NOTICE = "NOTICE";   // PORT_TRAFFIC_YELLOW
+    String MAO_TAG_LEVEL_WARNING = "WARNING"; // PORT_TRAFFIC_ORANGE
+    String MAO_TAG_LEVEL_ERROR = "ERROR";     // PORT_TRAFFIC_RED
+
+    List<String> mao_tag_level = Arrays.asList(MAO_TAG_LEVEL_INFO, MAO_TAG_LEVEL_NOTICE, MAO_TAG_LEVEL_WARNING, MAO_TAG_LEVEL_ERROR);
+
     /**
      * Returns the port number.
      *
diff --git a/core/api/src/main/java/org/onosproject/net/statistic/DefaultLoad.java b/core/api/src/main/java/org/onosproject/net/statistic/DefaultLoad.java
index 5e1f711b75..80621020a6 100644
--- a/core/api/src/main/java/org/onosproject/net/statistic/DefaultLoad.java
+++ b/core/api/src/main/java/org/onosproject/net/statistic/DefaultLoad.java
@@ -30,6 +30,9 @@ public class DefaultLoad implements Load {
     private final long time;
     private final long interval;
 
+    private final String maoTag;
+    private final String maoTagLevel;
+
     /**
      * Indicates the flow statistics poll interval in seconds.
      */
@@ -44,6 +47,21 @@ public class DefaultLoad implements Load {
         this.current = -1;
         this.previous = -1;
         this.interval = pollInterval;
+        this.maoTag = null;
+        this.maoTagLevel = null;
+    }
+
+    /**
+     * Creates an load value for custom tag for ONOS_Integration_Service.
+     */
+    public DefaultLoad(String maoTagValue, String maoTagLevelValue) {
+        this.isValid = false;
+        this.time = System.currentTimeMillis();
+        this.current = -1;
+        this.previous = -1;
+        this.interval = pollInterval;
+        this.maoTag = maoTagValue;
+        this.maoTagLevel = maoTagLevelValue;
     }
 
     /**
@@ -70,6 +88,8 @@ public class DefaultLoad implements Load {
         this.time = System.currentTimeMillis();
         this.isValid = true;
         this.interval = interval;
+        this.maoTag = null;
+        this.maoTagLevel = null;
     }
 
     /**
@@ -102,6 +122,16 @@ public class DefaultLoad implements Load {
         return time;
     }
 
+    @Override
+    public String maoTagValue() {
+        return maoTag;
+    }
+
+    @Override
+    public String maoTagLevelValue() {
+        return maoTagLevel;
+    }
+
     @Override
     public String toString() {
         return MoreObjects.toStringHelper("Load").add("rate", rate())
diff --git a/core/api/src/main/java/org/onosproject/net/statistic/Load.java b/core/api/src/main/java/org/onosproject/net/statistic/Load.java
index c948ea9f76..46b79d6301 100644
--- a/core/api/src/main/java/org/onosproject/net/statistic/Load.java
+++ b/core/api/src/main/java/org/onosproject/net/statistic/Load.java
@@ -48,4 +48,16 @@ public interface Load {
      */
     long time();
 
+    /**
+     * Returns the custom tag for ONOS_Integration_Service.
+     *
+     * @return custom tag
+     */
+    default String maoTagValue() {
+        return null;
+    }
+
+    default String maoTagLevelValue() {
+        return null;
+    }
 }
diff --git a/core/api/src/main/java/org/onosproject/net/statistic/PortStatisticsService.java b/core/api/src/main/java/org/onosproject/net/statistic/PortStatisticsService.java
index 4ed782b317..bd09028cdb 100644
--- a/core/api/src/main/java/org/onosproject/net/statistic/PortStatisticsService.java
+++ b/core/api/src/main/java/org/onosproject/net/statistic/PortStatisticsService.java
@@ -30,7 +30,10 @@ public interface PortStatisticsService {
         BYTES,
 
         /** Load is to be given in packets/second. */
-        PACKETS
+        PACKETS,
+
+        /** Custom tag for ONOS_Integration_Service. */
+        MAO_TAG,
     }
 
     /**
diff --git a/core/net/src/main/java/org/onosproject/net/statistic/impl/PortStatisticsManager.java b/core/net/src/main/java/org/onosproject/net/statistic/impl/PortStatisticsManager.java
index fa7df86676..b12a9af271 100644
--- a/core/net/src/main/java/org/onosproject/net/statistic/impl/PortStatisticsManager.java
+++ b/core/net/src/main/java/org/onosproject/net/statistic/impl/PortStatisticsManager.java
@@ -38,6 +38,9 @@ import java.util.stream.Collectors;
 import static org.onosproject.net.device.DeviceEvent.Type.DEVICE_AVAILABILITY_CHANGED;
 import static org.onosproject.net.device.DeviceEvent.Type.DEVICE_REMOVED;
 import static org.onosproject.net.device.DeviceEvent.Type.PORT_STATS_UPDATED;
+import static org.onosproject.net.device.PortStatistics.ANNOTATION_MAO_TAG;
+import static org.onosproject.net.device.PortStatistics.ANNOTATION_MAO_TAG_LEVEL;
+import static org.onosproject.net.device.PortStatistics.mao_tag_level;
 import static org.slf4j.LoggerFactory.getLogger;
 
 /**
@@ -79,6 +82,17 @@ public class PortStatisticsManager implements PortStatisticsService {
 
     @Override
     public Load load(ConnectPoint connectPoint, MetricType metricType) {
+
+        if (metricType == MetricType.MAO_TAG) {
+            DataPoint c = current.get(connectPoint);
+            String maoTagValue = c.stats.annotations().value(ANNOTATION_MAO_TAG);
+            String maoTagLevelValue = c.stats.annotations().value(ANNOTATION_MAO_TAG_LEVEL);
+
+            return (maoTagValue != null && maoTagLevelValue != null &&
+                    mao_tag_level.contains(maoTagLevelValue) && !maoTagValue.equals("")) ?
+                    new DefaultLoad(maoTagValue, maoTagLevelValue) : null;
+        }
+
         DataPoint c = current.get(connectPoint);
         DataPoint p = previous.get(connectPoint);
         long now = System.currentTimeMillis();
diff --git a/web/gui/src/main/java/org/onosproject/ui/impl/TopologyViewMessageHandler.java b/web/gui/src/main/java/org/onosproject/ui/impl/TopologyViewMessageHandler.java
index c8680ba018..fb10429f31 100644
--- a/web/gui/src/main/java/org/onosproject/ui/impl/TopologyViewMessageHandler.java
+++ b/web/gui/src/main/java/org/onosproject/ui/impl/TopologyViewMessageHandler.java
@@ -165,6 +165,7 @@ public class TopologyViewMessageHandler extends TopologyViewMessageHandlerBase {
     private static final String TRAFFIC_TYPE = "trafficType";
 
     // field values
+    private static final String MAO_STATS_TAG = "maoTag";
     private static final String FLOW_STATS_BYTES = "flowStatsBytes";
     private static final String PORT_STATS_BIT_SEC = "portStatsBitSec";
     private static final String PORT_STATS_PKT_SEC = "portStatsPktSec";
@@ -606,9 +607,12 @@ public class TopologyViewMessageHandler extends TopologyViewMessageHandlerBase {
 
         @Override
         public void process(ObjectNode payload) {
-            String trafficType = string(payload, TRAFFIC_TYPE, FLOW_STATS_BYTES);
+            String trafficType = string(payload, TRAFFIC_TYPE, MAO_STATS_TAG);
 
             switch (trafficType) {
+                case MAO_STATS_TAG:
+                    traffic.monitor(Mode.ALL_MAO_TRAFFIC_TAG);
+                    break;
                 case FLOW_STATS_BYTES:
                     traffic.monitor(Mode.ALL_FLOW_TRAFFIC_BYTES);
                     break;
diff --git a/web/gui/src/main/java/org/onosproject/ui/impl/TrafficMonitor.java b/web/gui/src/main/java/org/onosproject/ui/impl/TrafficMonitor.java
index 73bda39e82..031ef04fc3 100644
--- a/web/gui/src/main/java/org/onosproject/ui/impl/TrafficMonitor.java
+++ b/web/gui/src/main/java/org/onosproject/ui/impl/TrafficMonitor.java
@@ -118,6 +118,12 @@ public class TrafficMonitor extends TrafficMonitorBase {
     // =======================================================================
     // === Abstract method implementations ===
 
+    @Override
+    protected void sendAllMaoTrafficTags() {
+        log.debug("sendAllMaoTrafficTags");
+        msgHandler.sendHighlights(trafficSummary(StatsType.MAO_TAG));
+    }
+
     @Override
     protected void sendAllFlowTraffic() {
         log.debug("sendAllFlowTraffic");
diff --git a/web/gui/src/main/java/org/onosproject/ui/impl/TrafficMonitorBase.java b/web/gui/src/main/java/org/onosproject/ui/impl/TrafficMonitorBase.java
index c585d9216c..25b989b376 100644
--- a/web/gui/src/main/java/org/onosproject/ui/impl/TrafficMonitorBase.java
+++ b/web/gui/src/main/java/org/onosproject/ui/impl/TrafficMonitorBase.java
@@ -19,10 +19,13 @@ package org.onosproject.ui.impl;
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
+import org.onosproject.net.DefaultEdgeLink;
 import org.onosproject.net.Device;
+import org.onosproject.net.DeviceId;
 import org.onosproject.net.ElementId;
 import org.onosproject.net.Host;
 import org.onosproject.net.HostId;
+import org.onosproject.net.Link;
 import org.onosproject.net.device.DeviceService;
 import org.onosproject.net.intent.FlowObjectiveIntent;
 import org.onosproject.net.intent.FlowRuleIntent;
@@ -33,11 +36,8 @@ import org.onosproject.net.intent.OpticalConnectivityIntent;
 import org.onosproject.net.intent.OpticalPathIntent;
 import org.onosproject.net.intent.PathIntent;
 import org.onosproject.net.link.LinkService;
-import org.onosproject.net.statistic.PortStatisticsService.MetricType;
-import org.onosproject.net.DefaultEdgeLink;
-import org.onosproject.net.DeviceId;
-import org.onosproject.net.Link;
 import org.onosproject.net.statistic.Load;
+import org.onosproject.net.statistic.PortStatisticsService.MetricType;
 import org.onosproject.ui.UiExtensionService;
 import org.onosproject.ui.UiTopoHighlighter;
 import org.onosproject.ui.UiTopoHighlighterFactory;
@@ -69,10 +69,11 @@ import java.util.TimerTask;
 import java.util.stream.Collectors;
 
 import static org.onosproject.net.DefaultEdgeLink.createEdgeLink;
+import static org.onosproject.net.DefaultEdgeLink.createEdgeLinks;
 import static org.onosproject.net.statistic.PortStatisticsService.MetricType.BYTES;
+import static org.onosproject.net.statistic.PortStatisticsService.MetricType.MAO_TAG;
 import static org.onosproject.net.statistic.PortStatisticsService.MetricType.PACKETS;
-import static org.onosproject.net.DefaultEdgeLink.createEdgeLinks;
-import static org.onosproject.ui.impl.TrafficMonitorBase.Mode.*;
+import static org.onosproject.ui.impl.TrafficMonitorBase.Mode.IDLE;
 
 /**
  * Base superclass for traffic monitor (both 'classic' and 'topo2' versions).
@@ -283,6 +284,7 @@ public abstract class TrafficMonitorBase extends AbstractTopoMonitor {
      */
     public enum Mode {
         IDLE,
+        ALL_MAO_TRAFFIC_TAG,
         ALL_FLOW_TRAFFIC_BYTES,
         ALL_PORT_TRAFFIC_BIT_PS,
         ALL_PORT_TRAFFIC_PKT_PS,
@@ -301,7 +303,7 @@ public abstract class TrafficMonitorBase extends AbstractTopoMonitor {
     /**
      * Current operating mode.
      */
-    protected Mode mode = Mode.IDLE;
+    protected Mode mode = IDLE;
 
     private final Timer timer;
     private TimerTask trafficTask = null;
@@ -341,6 +343,11 @@ public abstract class TrafficMonitorBase extends AbstractTopoMonitor {
         this.mode = mode;
 
         switch (mode) {
+            case ALL_MAO_TRAFFIC_TAG:
+                clearSelection();
+                scheduleTaskForMaoTag();
+                sendAllMaoTrafficTags();
+                break;
 
             case ALL_FLOW_TRAFFIC_BYTES:
                 clearSelection();
@@ -374,7 +381,7 @@ public abstract class TrafficMonitorBase extends AbstractTopoMonitor {
 
 
     public synchronized void monitor(int index) {
-        mode = CUSTOM_TRAFFIC_MONITOR;
+        mode = Mode.CUSTOM_TRAFFIC_MONITOR;
         List<UiTopoHighlighterFactory> factories = services.get(UiExtensionService.class)
                 .getTopoHighlighterFactories();
         if (factories.isEmpty()) {
@@ -451,7 +458,7 @@ public abstract class TrafficMonitorBase extends AbstractTopoMonitor {
         log.debug("monitor intent: {}", intent.id());
         selectedNodes = null;
         selectedIntents = new IntentSelection(intent);
-        mode = SELECTED_INTENT;
+        mode = Mode.SELECTED_INTENT;
         scheduleTask();
         sendSelectedIntentTraffic();
     }
@@ -462,6 +469,8 @@ public abstract class TrafficMonitorBase extends AbstractTopoMonitor {
      */
     protected abstract void sendAllFlowTraffic();
 
+    protected abstract void sendAllMaoTrafficTags();
+
     /**
      * Subclass should compile and send appropriate highlights data showing
      * bits per second, as computed using port stats.
@@ -507,7 +516,7 @@ public abstract class TrafficMonitorBase extends AbstractTopoMonitor {
      * task, and sends a clear highlights event to the client.
      */
     protected void clearAll() {
-        this.mode = Mode.IDLE;
+        this.mode = IDLE;
         clearSelection();
         cancelTask();
         sendClearHighlights();
@@ -526,6 +535,19 @@ public abstract class TrafficMonitorBase extends AbstractTopoMonitor {
         }
     }
 
+    /**
+     * Schedules the background monitor task to run for the custom tag for ONOS_Integration_Service.
+     */
+    protected synchronized void scheduleTaskForMaoTag() {
+        if (trafficTask == null) {
+            log.debug("Starting up background traffic task for Mao Tag...");
+            trafficTask = new TrafficUpdateTask();
+            timer.schedule(trafficTask, 200, 200);
+        } else {
+            log.debug("(traffic task already running)");
+        }
+    }
+
     /**
      * Cancels the background monitor task.
      */
@@ -587,7 +609,9 @@ public abstract class TrafficMonitorBase extends AbstractTopoMonitor {
         Set<TrafficLink> linksWithTraffic = new HashSet<>();
 
         for (TrafficLink tlink : linkMap.biLinks()) {
-            if (type == TrafficLink.StatsType.FLOW_STATS) {
+            if (type == TrafficLink.StatsType.MAO_TAG) {
+                attachPortLoad(tlink, MAO_TAG);
+            } else if (type == TrafficLink.StatsType.FLOW_STATS) {
                 attachFlowLoad(tlink);
             } else if (type == TrafficLink.StatsType.PORT_STATS) {
                 attachPortLoad(tlink, BYTES);
@@ -596,7 +620,7 @@ public abstract class TrafficMonitorBase extends AbstractTopoMonitor {
             }
 
             // we only want to report on links deemed to have traffic
-            if (tlink.hasTraffic()) {
+            if (tlink.hasTraffic() || ((type == TrafficLink.StatsType.MAO_TAG) && tlink.hasMaoTag())) {
                 linksWithTraffic.add(tlink);
             }
         }
@@ -670,7 +694,23 @@ public abstract class TrafficMonitorBase extends AbstractTopoMonitor {
         Link one = link.one();
         Load egressSrc = services.portStats().load(one.src(), metricType);
         Load egressDst = services.portStats().load(one.dst(), metricType);
-        link.addLoad(maxLoad(egressSrc, egressDst), metricType == BYTES ? BPS_THRESHOLD : 0);
+
+        if (metricType == MAO_TAG) {
+            if (egressSrc != null && egressDst != null) {
+                link.setMaoTagValue(egressSrc.maoTagValue() + " <-> " + egressDst.maoTagValue());
+                link.setMaoTagLevelValue(egressSrc.maoTagLevelValue());
+            }
+            if (egressSrc != null) {
+                link.setMaoTagValue(egressSrc.maoTagValue());
+                link.setMaoTagLevelValue(egressSrc.maoTagLevelValue());
+            }
+            if (egressDst != null) {
+                link.setMaoTagValue(egressDst.maoTagValue());
+                link.setMaoTagLevelValue(egressDst.maoTagLevelValue());
+            }
+        } else {
+            link.addLoad(maxLoad(egressSrc, egressDst), metricType == BYTES ? BPS_THRESHOLD : 0);
+        }
     }
 
     /**
@@ -716,6 +756,9 @@ public abstract class TrafficMonitorBase extends AbstractTopoMonitor {
         public void run() {
             try {
                 switch (mode) {
+                    case ALL_MAO_TRAFFIC_TAG:
+                        sendAllMaoTrafficTags();
+                        break;
                     case ALL_FLOW_TRAFFIC_BYTES:
                         sendAllFlowTraffic();
                         break;
diff --git a/web/gui/src/main/java/org/onosproject/ui/impl/topo/Traffic2Monitor.java b/web/gui/src/main/java/org/onosproject/ui/impl/topo/Traffic2Monitor.java
index 1c0fb81af3..cf488b31ea 100644
--- a/web/gui/src/main/java/org/onosproject/ui/impl/topo/Traffic2Monitor.java
+++ b/web/gui/src/main/java/org/onosproject/ui/impl/topo/Traffic2Monitor.java
@@ -63,6 +63,11 @@ public class Traffic2Monitor extends TrafficMonitorBase {
         msgHandler.sendHighlights(trafficSummary(TrafficLink.StatsType.FLOW_STATS));
     }
 
+    @Override
+    protected void sendAllMaoTrafficTags() {
+        log.debug("TOPO-2-TRAFFIC: sendAllMaoTrafficTags, do nothing for topo2");
+    }
+
     @Override
     protected void sendCustomTraffic() {
     }
diff --git a/web/gui/src/main/java/org/onosproject/ui/impl/topo/util/TrafficLink.java b/web/gui/src/main/java/org/onosproject/ui/impl/topo/util/TrafficLink.java
index 6a4df7fa42..98384808c1 100644
--- a/web/gui/src/main/java/org/onosproject/ui/impl/topo/util/TrafficLink.java
+++ b/web/gui/src/main/java/org/onosproject/ui/impl/topo/util/TrafficLink.java
@@ -24,13 +24,16 @@ import org.onosproject.ui.topo.BiLink;
 import org.onosproject.ui.topo.LinkHighlight;
 import org.onosproject.ui.topo.LinkHighlight.Flavor;
 import org.onosproject.ui.topo.Mod;
-import org.onosproject.ui.topo.TopoUtils.Magnitude;
-import org.onosproject.ui.topo.TopoUtils.ValueLabel;
+import org.onosproject.ui.topo.TopoUtils;
 
 import java.util.HashSet;
 import java.util.Set;
 
 import static com.google.common.base.MoreObjects.toStringHelper;
+import static org.onosproject.net.device.PortStatistics.MAO_TAG_LEVEL_ERROR;
+import static org.onosproject.net.device.PortStatistics.MAO_TAG_LEVEL_INFO;
+import static org.onosproject.net.device.PortStatistics.MAO_TAG_LEVEL_NOTICE;
+import static org.onosproject.net.device.PortStatistics.MAO_TAG_LEVEL_WARNING;
 import static org.onosproject.ui.topo.LinkHighlight.Flavor.NO_HIGHLIGHT;
 import static org.onosproject.ui.topo.LinkHighlight.Flavor.PRIMARY_HIGHLIGHT;
 import static org.onosproject.ui.topo.LinkHighlight.Flavor.SECONDARY_HIGHLIGHT;
@@ -39,6 +42,7 @@ import static org.onosproject.ui.topo.TopoUtils.formatClippedBitRate;
 import static org.onosproject.ui.topo.TopoUtils.formatFlows;
 import static org.onosproject.ui.topo.TopoUtils.formatPacketRate;
 
+
 /**
  * Representation of a link and its inverse, and associated traffic data.
  * This class understands how to generate the appropriate
@@ -52,6 +56,8 @@ public class TrafficLink extends BiLink {
 
     private static final String EMPTY = "";
 
+    private String maoTag = null;
+    private String maoTagLevel = null;
     private long bytes = 0;
     private long rate = 0;
     private long flows = 0;
@@ -124,6 +130,32 @@ public class TrafficLink extends BiLink {
                 .toString();
     }
 
+    /**
+     * Returns the custom tag for ONOS_Integration_Service.
+     *
+     * @return the custom tag
+     */
+    public String maoTagValue() {
+        return maoTag;
+    }
+
+    public void setMaoTagValue(String maoTagValue) {
+        maoTag =  maoTagValue;
+    }
+
+    /**
+     * Returns the custom tag level for ONOS_Integration_Service.
+     *
+     * @return the custom tag
+     */
+    public String maoTagLevelValue() {
+        return maoTagLevel;
+    }
+
+    public void setMaoTagLevelValue(String maoTagLevelValue) {
+        maoTagLevel = maoTagLevelValue;
+    }
+
     /**
      * Returns the count of bytes.
      *
@@ -247,6 +279,9 @@ public class TrafficLink extends BiLink {
     public LinkHighlight highlight(Enum<?> type) {
         StatsType statsType = (StatsType) type;
         switch (statsType) {
+            case MAO_TAG:
+                return highlightForMaoTag();
+
             case FLOW_COUNT:
                 return highlightForFlowCount();
 
@@ -263,8 +298,45 @@ public class TrafficLink extends BiLink {
         }
     }
 
+    private LinkHighlight highlightForMaoTag() {
+
+        Mod m = null;
+        if (maoTagLevel != null) {
+            switch (maoTagLevel) {
+                case MAO_TAG_LEVEL_INFO:
+                    m = PORT_TRAFFIC_GREEN;
+                    break;
+
+                case MAO_TAG_LEVEL_NOTICE:
+                    m = PORT_TRAFFIC_YELLOW;
+                    break;
+
+                case MAO_TAG_LEVEL_WARNING:
+                    m = PORT_TRAFFIC_ORANGE;
+                    break;
+
+                case MAO_TAG_LEVEL_ERROR:
+                    m = PORT_TRAFFIC_RED;
+                    break;
+
+                default:
+                    m = PORT_TRAFFIC_GREEN;
+            }
+        }
+
+        LinkHighlight hlite = new LinkHighlight(linkId(), SECONDARY_HIGHLIGHT);
+        if (maoTag != null && !maoTag.equals(" ")) {
+            hlite.setLabel(maoTag);
+        }
+        if (m != null) {
+            hlite.addMod(m);
+        }
+
+        return addCustomMods(hlite);
+    }
+
     private LinkHighlight highlightForStats(StatsType type) {
-        ValueLabel vl = null;
+        TopoUtils.ValueLabel vl = null;
         Mod m = null;
 
         // based on the type of stats, need to determine the label and "color"...
@@ -278,14 +350,14 @@ public class TrafficLink extends BiLink {
                 vl = formatClippedBitRate(rate);
 
                 // set color based on bits per second...
-                if (vl.magnitude() == Magnitude.ONE ||
-                        vl.magnitude() == Magnitude.KILO) {
+                if (vl.magnitude() == TopoUtils.Magnitude.ONE ||
+                        vl.magnitude() == TopoUtils.Magnitude.KILO) {
                     m = PORT_TRAFFIC_GREEN;
 
-                } else if (vl.magnitude() == Magnitude.MEGA) {
+                } else if (vl.magnitude() == TopoUtils.Magnitude.MEGA) {
                     m = PORT_TRAFFIC_YELLOW;
 
-                } else if (vl.magnitude() == Magnitude.GIGA) {
+                } else if (vl.magnitude() == TopoUtils.Magnitude.GIGA) {
                     m = vl.clipped() ? PORT_TRAFFIC_RED : PORT_TRAFFIC_ORANGE;
                 }
                 break;
@@ -361,10 +433,24 @@ public class TrafficLink extends BiLink {
         return hasTraffic;
     }
 
+    /**
+     * Returns true if this link has been added any custom tags for ONOS_Integration_Service.
+     *
+     * @return true if this link has any custom tags
+     */
+    public boolean hasMaoTag() {
+        return maoTag != null && maoTagLevel != null;
+    }
+
     /**
      * Designates type of traffic statistics to report on a highlighted link.
      */
     public enum StatsType {
+        /**
+         * Custom tag for ONOS_Integration_Service.
+         */
+        MAO_TAG,
+
         /**
          * Number of flows.
          */
@@ -390,4 +476,11 @@ public class TrafficLink extends BiLink {
          */
         TAGGED
     }
+
+//    public enum MAO_TAG_LEVEL {
+//        INFO,
+//        NOTICE,
+//        WARNING,
+//        ERROR,
+//    }
 }
diff --git a/web/gui/src/main/resources/org/onosproject/ui/lion/core/view/Topo.properties b/web/gui/src/main/resources/org/onosproject/ui/lion/core/view/Topo.properties
index 8f9334eb0c..5844fd4050 100644
--- a/web/gui/src/main/resources/org/onosproject/ui/lion/core/view/Topo.properties
+++ b/web/gui/src/main/resources/org/onosproject/ui/lion/core/view/Topo.properties
@@ -109,6 +109,7 @@ tr_btn_show_all_rel_intents=Show all related intents
 tr_btn_show_prev_rel_intent=Show previous related intent
 tr_btn_show_next_rel_intent=Show next related intent
 tr_btn_monitor_sel_intent=Monitor traffic of selected intent
+tr_fl_mstats_tag=Mao Custom Tags
 tr_fl_fstats_bytes=Flow Stats (bytes)
 tr_fl_pstats_bits=Port Stats (bits / second)
 tr_fl_pstats_pkts=Port Stats (packets / second)
diff --git a/web/gui/src/main/webapp/app/view/topo/topoTraffic.js b/web/gui/src/main/webapp/app/view/topo/topoTraffic.js
index c643494132..9b5275bebf 100644
--- a/web/gui/src/main/webapp/app/view/topo/topoTraffic.js
+++ b/web/gui/src/main/webapp/app/view/topo/topoTraffic.js
@@ -38,6 +38,7 @@
      */
 
     var allTrafficTypes = [
+            'maoTag',
             'flowStatsBytes',
             'portStatsBitSec',
             'portStatsPktSec',
@@ -58,6 +59,7 @@
         $log.debug('topoTraffic: setting Lion bundle');
         topoLion = bundle;
         allTrafficMsgs = [
+            topoLion('tr_fl_mstats_tag'),
             topoLion('tr_fl_fstats_bytes'),
             topoLion('tr_fl_pstats_bits'),
             topoLion('tr_fl_pstats_pkts'),
@@ -135,7 +137,7 @@
             trafficType: allTrafficTypes[allTrafficIndex],
         });
         flash.flash(allTrafficMsgs[allTrafficIndex]);
-        allTrafficIndex = (allTrafficIndex + 1) % 3;
+        allTrafficIndex = (allTrafficIndex + 1) % 4;
     }
 
     function showCustomTraffic() {
-- 
2.34.1

